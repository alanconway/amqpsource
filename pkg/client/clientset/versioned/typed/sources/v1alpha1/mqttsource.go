/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Someday...  // Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/pkg/apis/sources/v1alpha1"
	scheme "github.com/knative/eventing-sources/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MqttSourcesGetter has a method to return a MqttSourceInterface.
// A group's client should implement this interface.
type MqttSourcesGetter interface {
	MqttSources(namespace string) MqttSourceInterface
}

// MqttSourceInterface has methods to work with MqttSource resources.
type MqttSourceInterface interface {
	Create(*v1alpha1.MqttSource) (*v1alpha1.MqttSource, error)
	Update(*v1alpha1.MqttSource) (*v1alpha1.MqttSource, error)
	UpdateStatus(*v1alpha1.MqttSource) (*v1alpha1.MqttSource, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.MqttSource, error)
	List(opts v1.ListOptions) (*v1alpha1.MqttSourceList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MqttSource, err error)
	MqttSourceExpansion
}

// mqttSources implements MqttSourceInterface
type mqttSources struct {
	client rest.Interface
	ns     string
}

// newMqttSources returns a MqttSources
func newMqttSources(c *SourcesV1alpha1Client, namespace string) *mqttSources {
	return &mqttSources{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the mqttSource, and returns the corresponding mqttSource object, and an error if there is any.
func (c *mqttSources) Get(name string, options v1.GetOptions) (result *v1alpha1.MqttSource, err error) {
	result = &v1alpha1.MqttSource{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mqttsources").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MqttSources that match those selectors.
func (c *mqttSources) List(opts v1.ListOptions) (result *v1alpha1.MqttSourceList, err error) {
	result = &v1alpha1.MqttSourceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mqttsources").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested mqttSources.
func (c *mqttSources) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("mqttsources").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a mqttSource and creates it.  Returns the server's representation of the mqttSource, and an error, if there is any.
func (c *mqttSources) Create(mqttSource *v1alpha1.MqttSource) (result *v1alpha1.MqttSource, err error) {
	result = &v1alpha1.MqttSource{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("mqttsources").
		Body(mqttSource).
		Do().
		Into(result)
	return
}

// Update takes the representation of a mqttSource and updates it. Returns the server's representation of the mqttSource, and an error, if there is any.
func (c *mqttSources) Update(mqttSource *v1alpha1.MqttSource) (result *v1alpha1.MqttSource, err error) {
	result = &v1alpha1.MqttSource{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("mqttsources").
		Name(mqttSource.Name).
		Body(mqttSource).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *mqttSources) UpdateStatus(mqttSource *v1alpha1.MqttSource) (result *v1alpha1.MqttSource, err error) {
	result = &v1alpha1.MqttSource{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("mqttsources").
		Name(mqttSource.Name).
		SubResource("status").
		Body(mqttSource).
		Do().
		Into(result)
	return
}

// Delete takes name of the mqttSource and deletes it. Returns an error if one occurs.
func (c *mqttSources) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mqttsources").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *mqttSources) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mqttsources").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched mqttSource.
func (c *mqttSources) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MqttSource, err error) {
	result = &v1alpha1.MqttSource{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("mqttsources").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
